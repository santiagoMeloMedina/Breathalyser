// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2019 09:49:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    arm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module arm_vlg_sample_tst(
	operation,
	reg1,
	reg2,
	reg3,
	reloj,
	sampler_tx
);
input [3:0] operation;
input [3:0] reg1;
input [3:0] reg2;
input [3:0] reg3;
input  reloj;
output sampler_tx;

reg sample;
time current_time;
always @(operation or reg1 or reg2 or reg3 or reloj)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module arm_vlg_check_tst (
	visual,
	sampler_rx
);
input [15:0] visual;
input sampler_rx;

reg [15:0] visual_expected;

reg [15:0] visual_prev;

reg [15:0] visual_expected_prev;

reg [15:0] last_visual_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	visual_prev = visual;
end

// update expected /o prevs

always @(trigger)
begin
	visual_expected_prev = visual_expected;
end


// expected visual[ 15 ]
initial
begin
	visual_expected[15] = 1'bX;
end 
// expected visual[ 14 ]
initial
begin
	visual_expected[14] = 1'bX;
end 
// expected visual[ 13 ]
initial
begin
	visual_expected[13] = 1'bX;
end 
// expected visual[ 12 ]
initial
begin
	visual_expected[12] = 1'bX;
end 
// expected visual[ 11 ]
initial
begin
	visual_expected[11] = 1'bX;
end 
// expected visual[ 10 ]
initial
begin
	visual_expected[10] = 1'bX;
end 
// expected visual[ 9 ]
initial
begin
	visual_expected[9] = 1'bX;
end 
// expected visual[ 8 ]
initial
begin
	visual_expected[8] = 1'bX;
end 
// expected visual[ 7 ]
initial
begin
	visual_expected[7] = 1'bX;
end 
// expected visual[ 6 ]
initial
begin
	visual_expected[6] = 1'bX;
end 
// expected visual[ 5 ]
initial
begin
	visual_expected[5] = 1'bX;
end 
// expected visual[ 4 ]
initial
begin
	visual_expected[4] = 1'bX;
end 
// expected visual[ 3 ]
initial
begin
	visual_expected[3] = 1'bX;
end 
// expected visual[ 2 ]
initial
begin
	visual_expected[2] = 1'bX;
end 
// expected visual[ 1 ]
initial
begin
	visual_expected[1] = 1'bX;
end 
// expected visual[ 0 ]
initial
begin
	visual_expected[0] = 1'bX;
end 
// generate trigger
always @(visual_expected or visual)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected visual = %b | ",visual_expected_prev);
	$display("| real visual = %b | ",visual_prev);
`endif
	if (
		( visual_expected_prev[0] !== 1'bx ) && ( visual_prev[0] !== visual_expected_prev[0] )
		&& ((visual_expected_prev[0] !== last_visual_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[0] = visual_expected_prev[0];
	end
	if (
		( visual_expected_prev[1] !== 1'bx ) && ( visual_prev[1] !== visual_expected_prev[1] )
		&& ((visual_expected_prev[1] !== last_visual_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[1] = visual_expected_prev[1];
	end
	if (
		( visual_expected_prev[2] !== 1'bx ) && ( visual_prev[2] !== visual_expected_prev[2] )
		&& ((visual_expected_prev[2] !== last_visual_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[2] = visual_expected_prev[2];
	end
	if (
		( visual_expected_prev[3] !== 1'bx ) && ( visual_prev[3] !== visual_expected_prev[3] )
		&& ((visual_expected_prev[3] !== last_visual_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[3] = visual_expected_prev[3];
	end
	if (
		( visual_expected_prev[4] !== 1'bx ) && ( visual_prev[4] !== visual_expected_prev[4] )
		&& ((visual_expected_prev[4] !== last_visual_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[4] = visual_expected_prev[4];
	end
	if (
		( visual_expected_prev[5] !== 1'bx ) && ( visual_prev[5] !== visual_expected_prev[5] )
		&& ((visual_expected_prev[5] !== last_visual_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[5] = visual_expected_prev[5];
	end
	if (
		( visual_expected_prev[6] !== 1'bx ) && ( visual_prev[6] !== visual_expected_prev[6] )
		&& ((visual_expected_prev[6] !== last_visual_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[6] = visual_expected_prev[6];
	end
	if (
		( visual_expected_prev[7] !== 1'bx ) && ( visual_prev[7] !== visual_expected_prev[7] )
		&& ((visual_expected_prev[7] !== last_visual_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[7] = visual_expected_prev[7];
	end
	if (
		( visual_expected_prev[8] !== 1'bx ) && ( visual_prev[8] !== visual_expected_prev[8] )
		&& ((visual_expected_prev[8] !== last_visual_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[8] = visual_expected_prev[8];
	end
	if (
		( visual_expected_prev[9] !== 1'bx ) && ( visual_prev[9] !== visual_expected_prev[9] )
		&& ((visual_expected_prev[9] !== last_visual_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[9] = visual_expected_prev[9];
	end
	if (
		( visual_expected_prev[10] !== 1'bx ) && ( visual_prev[10] !== visual_expected_prev[10] )
		&& ((visual_expected_prev[10] !== last_visual_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[10] = visual_expected_prev[10];
	end
	if (
		( visual_expected_prev[11] !== 1'bx ) && ( visual_prev[11] !== visual_expected_prev[11] )
		&& ((visual_expected_prev[11] !== last_visual_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[11] = visual_expected_prev[11];
	end
	if (
		( visual_expected_prev[12] !== 1'bx ) && ( visual_prev[12] !== visual_expected_prev[12] )
		&& ((visual_expected_prev[12] !== last_visual_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[12] = visual_expected_prev[12];
	end
	if (
		( visual_expected_prev[13] !== 1'bx ) && ( visual_prev[13] !== visual_expected_prev[13] )
		&& ((visual_expected_prev[13] !== last_visual_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[13] = visual_expected_prev[13];
	end
	if (
		( visual_expected_prev[14] !== 1'bx ) && ( visual_prev[14] !== visual_expected_prev[14] )
		&& ((visual_expected_prev[14] !== last_visual_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[14] = visual_expected_prev[14];
	end
	if (
		( visual_expected_prev[15] !== 1'bx ) && ( visual_prev[15] !== visual_expected_prev[15] )
		&& ((visual_expected_prev[15] !== last_visual_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual_expected_prev);
		$display ("     Real value = %b", visual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_visual_exp[15] = visual_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module arm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] operation;
reg [3:0] reg1;
reg [3:0] reg2;
reg [3:0] reg3;
reg reloj;
// wires                                               
wire [15:0] visual;

wire sampler;                             

// assign statements (if any)                          
arm i1 (
// port map - connection between master ports and signals/registers   
	.operation(operation),
	.reg1(reg1),
	.reg2(reg2),
	.reg3(reg3),
	.reloj(reloj),
	.visual(visual)
);

// reloj
initial
begin
	reloj = 1'b1;
	# 10000;
	repeat(49)
	begin
		reloj = 1'b0;
		reloj = #10000 1'b1;
		# 10000;
	end
	reloj = 1'b0;
end 
// reg1[ 3 ]
initial
begin
	reg1[3] = 1'b0;
end 
// reg1[ 2 ]
initial
begin
	reg1[2] = 1'b0;
end 
// reg1[ 1 ]
initial
begin
	reg1[1] = 1'b0;
end 
// reg1[ 0 ]
initial
begin
	reg1[0] = 1'b0;
end 
// reg2[ 3 ]
initial
begin
	reg2[3] = 1'b0;
end 
// reg2[ 2 ]
initial
begin
	reg2[2] = 1'b0;
end 
// reg2[ 1 ]
initial
begin
	reg2[1] = 1'b0;
end 
// reg2[ 0 ]
initial
begin
	reg2[0] = 1'b1;
end 
// reg3[ 3 ]
initial
begin
	reg3[3] = 1'b0;
end 
// reg3[ 2 ]
initial
begin
	reg3[2] = 1'b0;
end 
// reg3[ 1 ]
initial
begin
	reg3[1] = 1'b1;
end 
// reg3[ 0 ]
initial
begin
	reg3[0] = 1'b0;
end 
// operation[ 3 ]
initial
begin
	operation[3] = 1'b0;
end 
// operation[ 2 ]
initial
begin
	operation[2] = 1'b0;
end 
// operation[ 1 ]
initial
begin
	operation[1] = 1'b1;
end 
// operation[ 0 ]
initial
begin
	operation[0] = 1'b0;
end 

arm_vlg_sample_tst tb_sample (
	.operation(operation),
	.reg1(reg1),
	.reg2(reg2),
	.reg3(reg3),
	.reloj(reloj),
	.sampler_tx(sampler)
);

arm_vlg_check_tst tb_out(
	.visual(visual),
	.sampler_rx(sampler)
);
endmodule

