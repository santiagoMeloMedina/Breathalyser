// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2019 20:01:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pc_memory_control_tb
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_memory_control_tb_vlg_sample_tst(
	reloj,
	sampler_tx
);
input  reloj;
output sampler_tx;

reg sample;
time current_time;
always @(reloj)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pc_memory_control_tb_vlg_check_tst (
	flagv,
	info,
	regvisual,
	v3,
	v4,
	visual,
	visual2,
	sampler_rx
);
input  flagv;
input [22:0] info;
input [3:0] regvisual;
input [15:0] v3;
input [15:0] v4;
input [15:0] visual;
input [15:0] visual2;
input sampler_rx;

reg  flagv_expected;
reg [22:0] info_expected;
reg [3:0] regvisual_expected;
reg [15:0] v3_expected;
reg [15:0] v4_expected;
reg [15:0] visual_expected;
reg [15:0] visual2_expected;

reg  flagv_prev;
reg [22:0] info_prev;
reg [3:0] regvisual_prev;
reg [15:0] v3_prev;
reg [15:0] v4_prev;
reg [15:0] visual_prev;
reg [15:0] visual2_prev;

reg [22:0] info_expected_prev;
reg [15:0] visual2_expected_prev;

reg [22:0] last_info_exp;
reg [15:0] last_visual2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	flagv_prev = flagv;
	info_prev = info;
	regvisual_prev = regvisual;
	v3_prev = v3;
	v4_prev = v4;
	visual_prev = visual;
	visual2_prev = visual2;
end

// update expected /o prevs

always @(trigger)
begin
	info_expected_prev = info_expected;
	visual2_expected_prev = visual2_expected;
end


// expected info[ 22 ]
initial
begin
	info_expected[22] = 1'bX;
end 
// expected info[ 21 ]
initial
begin
	info_expected[21] = 1'bX;
end 
// expected info[ 20 ]
initial
begin
	info_expected[20] = 1'bX;
end 
// expected info[ 19 ]
initial
begin
	info_expected[19] = 1'bX;
end 
// expected info[ 18 ]
initial
begin
	info_expected[18] = 1'bX;
end 
// expected info[ 17 ]
initial
begin
	info_expected[17] = 1'bX;
end 
// expected info[ 16 ]
initial
begin
	info_expected[16] = 1'bX;
end 
// expected info[ 15 ]
initial
begin
	info_expected[15] = 1'bX;
end 
// expected info[ 14 ]
initial
begin
	info_expected[14] = 1'bX;
end 
// expected info[ 13 ]
initial
begin
	info_expected[13] = 1'bX;
end 
// expected info[ 12 ]
initial
begin
	info_expected[12] = 1'bX;
end 
// expected info[ 11 ]
initial
begin
	info_expected[11] = 1'bX;
end 
// expected info[ 10 ]
initial
begin
	info_expected[10] = 1'bX;
end 
// expected info[ 9 ]
initial
begin
	info_expected[9] = 1'bX;
end 
// expected info[ 8 ]
initial
begin
	info_expected[8] = 1'bX;
end 
// expected info[ 7 ]
initial
begin
	info_expected[7] = 1'bX;
end 
// expected info[ 6 ]
initial
begin
	info_expected[6] = 1'bX;
end 
// expected info[ 5 ]
initial
begin
	info_expected[5] = 1'bX;
end 
// expected info[ 4 ]
initial
begin
	info_expected[4] = 1'bX;
end 
// expected info[ 3 ]
initial
begin
	info_expected[3] = 1'bX;
end 
// expected info[ 2 ]
initial
begin
	info_expected[2] = 1'bX;
end 
// expected info[ 1 ]
initial
begin
	info_expected[1] = 1'bX;
end 
// expected info[ 0 ]
initial
begin
	info_expected[0] = 1'bX;
end 
// expected visual2[ 15 ]
initial
begin
	visual2_expected[15] = 1'bX;
end 
// expected visual2[ 14 ]
initial
begin
	visual2_expected[14] = 1'bX;
end 
// expected visual2[ 13 ]
initial
begin
	visual2_expected[13] = 1'bX;
end 
// expected visual2[ 12 ]
initial
begin
	visual2_expected[12] = 1'bX;
end 
// expected visual2[ 11 ]
initial
begin
	visual2_expected[11] = 1'bX;
end 
// expected visual2[ 10 ]
initial
begin
	visual2_expected[10] = 1'bX;
end 
// expected visual2[ 9 ]
initial
begin
	visual2_expected[9] = 1'bX;
end 
// expected visual2[ 8 ]
initial
begin
	visual2_expected[8] = 1'bX;
end 
// expected visual2[ 7 ]
initial
begin
	visual2_expected[7] = 1'bX;
end 
// expected visual2[ 6 ]
initial
begin
	visual2_expected[6] = 1'bX;
end 
// expected visual2[ 5 ]
initial
begin
	visual2_expected[5] = 1'bX;
end 
// expected visual2[ 4 ]
initial
begin
	visual2_expected[4] = 1'bX;
end 
// expected visual2[ 3 ]
initial
begin
	visual2_expected[3] = 1'bX;
end 
// expected visual2[ 2 ]
initial
begin
	visual2_expected[2] = 1'bX;
end 
// expected visual2[ 1 ]
initial
begin
	visual2_expected[1] = 1'bX;
end 
// expected visual2[ 0 ]
initial
begin
	visual2_expected[0] = 1'bX;
end 
// generate trigger
always @(flagv_expected or flagv or info_expected or info or regvisual_expected or regvisual or v3_expected or v3 or v4_expected or v4 or visual_expected or visual or visual2_expected or visual2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected flagv = %b | expected info = %b | expected regvisual = %b | expected v3 = %b | expected v4 = %b | expected visual = %b | expected visual2 = %b | ",flagv_expected_prev,info_expected_prev,regvisual_expected_prev,v3_expected_prev,v4_expected_prev,visual_expected_prev,visual2_expected_prev);
	$display("| real flagv = %b | real info = %b | real regvisual = %b | real v3 = %b | real v4 = %b | real visual = %b | real visual2 = %b | ",flagv_prev,info_prev,regvisual_prev,v3_prev,v4_prev,visual_prev,visual2_prev);
`endif
	if (
		( info_expected_prev[0] !== 1'bx ) && ( info_prev[0] !== info_expected_prev[0] )
		&& ((info_expected_prev[0] !== last_info_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[0] = info_expected_prev[0];
	end
	if (
		( info_expected_prev[1] !== 1'bx ) && ( info_prev[1] !== info_expected_prev[1] )
		&& ((info_expected_prev[1] !== last_info_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[1] = info_expected_prev[1];
	end
	if (
		( info_expected_prev[2] !== 1'bx ) && ( info_prev[2] !== info_expected_prev[2] )
		&& ((info_expected_prev[2] !== last_info_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[2] = info_expected_prev[2];
	end
	if (
		( info_expected_prev[3] !== 1'bx ) && ( info_prev[3] !== info_expected_prev[3] )
		&& ((info_expected_prev[3] !== last_info_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[3] = info_expected_prev[3];
	end
	if (
		( info_expected_prev[4] !== 1'bx ) && ( info_prev[4] !== info_expected_prev[4] )
		&& ((info_expected_prev[4] !== last_info_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[4] = info_expected_prev[4];
	end
	if (
		( info_expected_prev[5] !== 1'bx ) && ( info_prev[5] !== info_expected_prev[5] )
		&& ((info_expected_prev[5] !== last_info_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[5] = info_expected_prev[5];
	end
	if (
		( info_expected_prev[6] !== 1'bx ) && ( info_prev[6] !== info_expected_prev[6] )
		&& ((info_expected_prev[6] !== last_info_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[6] = info_expected_prev[6];
	end
	if (
		( info_expected_prev[7] !== 1'bx ) && ( info_prev[7] !== info_expected_prev[7] )
		&& ((info_expected_prev[7] !== last_info_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[7] = info_expected_prev[7];
	end
	if (
		( info_expected_prev[8] !== 1'bx ) && ( info_prev[8] !== info_expected_prev[8] )
		&& ((info_expected_prev[8] !== last_info_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[8] = info_expected_prev[8];
	end
	if (
		( info_expected_prev[9] !== 1'bx ) && ( info_prev[9] !== info_expected_prev[9] )
		&& ((info_expected_prev[9] !== last_info_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[9] = info_expected_prev[9];
	end
	if (
		( info_expected_prev[10] !== 1'bx ) && ( info_prev[10] !== info_expected_prev[10] )
		&& ((info_expected_prev[10] !== last_info_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[10] = info_expected_prev[10];
	end
	if (
		( info_expected_prev[11] !== 1'bx ) && ( info_prev[11] !== info_expected_prev[11] )
		&& ((info_expected_prev[11] !== last_info_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[11] = info_expected_prev[11];
	end
	if (
		( info_expected_prev[12] !== 1'bx ) && ( info_prev[12] !== info_expected_prev[12] )
		&& ((info_expected_prev[12] !== last_info_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[12] = info_expected_prev[12];
	end
	if (
		( info_expected_prev[13] !== 1'bx ) && ( info_prev[13] !== info_expected_prev[13] )
		&& ((info_expected_prev[13] !== last_info_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[13] = info_expected_prev[13];
	end
	if (
		( info_expected_prev[14] !== 1'bx ) && ( info_prev[14] !== info_expected_prev[14] )
		&& ((info_expected_prev[14] !== last_info_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[14] = info_expected_prev[14];
	end
	if (
		( info_expected_prev[15] !== 1'bx ) && ( info_prev[15] !== info_expected_prev[15] )
		&& ((info_expected_prev[15] !== last_info_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[15] = info_expected_prev[15];
	end
	if (
		( info_expected_prev[16] !== 1'bx ) && ( info_prev[16] !== info_expected_prev[16] )
		&& ((info_expected_prev[16] !== last_info_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[16] = info_expected_prev[16];
	end
	if (
		( info_expected_prev[17] !== 1'bx ) && ( info_prev[17] !== info_expected_prev[17] )
		&& ((info_expected_prev[17] !== last_info_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[17] = info_expected_prev[17];
	end
	if (
		( info_expected_prev[18] !== 1'bx ) && ( info_prev[18] !== info_expected_prev[18] )
		&& ((info_expected_prev[18] !== last_info_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[18] = info_expected_prev[18];
	end
	if (
		( info_expected_prev[19] !== 1'bx ) && ( info_prev[19] !== info_expected_prev[19] )
		&& ((info_expected_prev[19] !== last_info_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[19] = info_expected_prev[19];
	end
	if (
		( info_expected_prev[20] !== 1'bx ) && ( info_prev[20] !== info_expected_prev[20] )
		&& ((info_expected_prev[20] !== last_info_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[20] = info_expected_prev[20];
	end
	if (
		( info_expected_prev[21] !== 1'bx ) && ( info_prev[21] !== info_expected_prev[21] )
		&& ((info_expected_prev[21] !== last_info_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[21] = info_expected_prev[21];
	end
	if (
		( info_expected_prev[22] !== 1'bx ) && ( info_prev[22] !== info_expected_prev[22] )
		&& ((info_expected_prev[22] !== last_info_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port info[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", info_expected_prev);
		$display ("     Real value = %b", info_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_info_exp[22] = info_expected_prev[22];
	end
	if (
		( visual2_expected_prev[0] !== 1'bx ) && ( visual2_prev[0] !== visual2_expected_prev[0] )
		&& ((visual2_expected_prev[0] !== last_visual2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[0] = visual2_expected_prev[0];
	end
	if (
		( visual2_expected_prev[1] !== 1'bx ) && ( visual2_prev[1] !== visual2_expected_prev[1] )
		&& ((visual2_expected_prev[1] !== last_visual2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[1] = visual2_expected_prev[1];
	end
	if (
		( visual2_expected_prev[2] !== 1'bx ) && ( visual2_prev[2] !== visual2_expected_prev[2] )
		&& ((visual2_expected_prev[2] !== last_visual2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[2] = visual2_expected_prev[2];
	end
	if (
		( visual2_expected_prev[3] !== 1'bx ) && ( visual2_prev[3] !== visual2_expected_prev[3] )
		&& ((visual2_expected_prev[3] !== last_visual2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[3] = visual2_expected_prev[3];
	end
	if (
		( visual2_expected_prev[4] !== 1'bx ) && ( visual2_prev[4] !== visual2_expected_prev[4] )
		&& ((visual2_expected_prev[4] !== last_visual2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[4] = visual2_expected_prev[4];
	end
	if (
		( visual2_expected_prev[5] !== 1'bx ) && ( visual2_prev[5] !== visual2_expected_prev[5] )
		&& ((visual2_expected_prev[5] !== last_visual2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[5] = visual2_expected_prev[5];
	end
	if (
		( visual2_expected_prev[6] !== 1'bx ) && ( visual2_prev[6] !== visual2_expected_prev[6] )
		&& ((visual2_expected_prev[6] !== last_visual2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[6] = visual2_expected_prev[6];
	end
	if (
		( visual2_expected_prev[7] !== 1'bx ) && ( visual2_prev[7] !== visual2_expected_prev[7] )
		&& ((visual2_expected_prev[7] !== last_visual2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[7] = visual2_expected_prev[7];
	end
	if (
		( visual2_expected_prev[8] !== 1'bx ) && ( visual2_prev[8] !== visual2_expected_prev[8] )
		&& ((visual2_expected_prev[8] !== last_visual2_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[8] = visual2_expected_prev[8];
	end
	if (
		( visual2_expected_prev[9] !== 1'bx ) && ( visual2_prev[9] !== visual2_expected_prev[9] )
		&& ((visual2_expected_prev[9] !== last_visual2_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[9] = visual2_expected_prev[9];
	end
	if (
		( visual2_expected_prev[10] !== 1'bx ) && ( visual2_prev[10] !== visual2_expected_prev[10] )
		&& ((visual2_expected_prev[10] !== last_visual2_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[10] = visual2_expected_prev[10];
	end
	if (
		( visual2_expected_prev[11] !== 1'bx ) && ( visual2_prev[11] !== visual2_expected_prev[11] )
		&& ((visual2_expected_prev[11] !== last_visual2_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[11] = visual2_expected_prev[11];
	end
	if (
		( visual2_expected_prev[12] !== 1'bx ) && ( visual2_prev[12] !== visual2_expected_prev[12] )
		&& ((visual2_expected_prev[12] !== last_visual2_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[12] = visual2_expected_prev[12];
	end
	if (
		( visual2_expected_prev[13] !== 1'bx ) && ( visual2_prev[13] !== visual2_expected_prev[13] )
		&& ((visual2_expected_prev[13] !== last_visual2_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[13] = visual2_expected_prev[13];
	end
	if (
		( visual2_expected_prev[14] !== 1'bx ) && ( visual2_prev[14] !== visual2_expected_prev[14] )
		&& ((visual2_expected_prev[14] !== last_visual2_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[14] = visual2_expected_prev[14];
	end
	if (
		( visual2_expected_prev[15] !== 1'bx ) && ( visual2_prev[15] !== visual2_expected_prev[15] )
		&& ((visual2_expected_prev[15] !== last_visual2_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port visual2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", visual2_expected_prev);
		$display ("     Real value = %b", visual2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_visual2_exp[15] = visual2_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pc_memory_control_tb_vlg_vec_tst();
// constants                                           
// general purpose registers
reg reloj;
// wires                                               
wire flagv;
wire [22:0] info;
wire [3:0] regvisual;
wire [15:0] v3;
wire [15:0] v4;
wire [15:0] visual;
wire [15:0] visual2;

wire sampler;                             

// assign statements (if any)                          
pc_memory_control_tb i1 (
// port map - connection between master ports and signals/registers   
	.flagv(flagv),
	.info(info),
	.regvisual(regvisual),
	.reloj(reloj),
	.v3(v3),
	.v4(v4),
	.visual(visual),
	.visual2(visual2)
);

// reloj
initial
begin
	reloj = 1'b1;
	# 5000;
	repeat(99)
	begin
		reloj = 1'b0;
		reloj = #5000 1'b1;
		# 5000;
	end
	reloj = 1'b0;
end 

pc_memory_control_tb_vlg_sample_tst tb_sample (
	.reloj(reloj),
	.sampler_tx(sampler)
);

pc_memory_control_tb_vlg_check_tst tb_out(
	.flagv(flagv),
	.info(info),
	.regvisual(regvisual),
	.v3(v3),
	.v4(v4),
	.visual(visual),
	.visual2(visual2),
	.sampler_rx(sampler)
);
endmodule

